const jsExercises = [
  {
    id: 1,
    lesson: {
      title: "üìò Exerc√≠cio 1 - Vari√°veis",
      text: "Em JavaScript, usamos 'let' ou 'const' para declarar vari√°veis. 'let' permite reatribui√ß√£o, enquanto 'const' n√£o permite.",
      example: "let idade = 25; const nome = 'Jo√£o';",
    },
    question: "Declare uma vari√°vel chamada 'cidade' e atribua a ela o valor 'S√£o Paulo'.",
    answer: "let cidade = 'S√£o Paulo';",
    extra: "Vari√°veis s√£o como 'caixas' onde guardamos valores para usar no programa. Em JavaScript moderno, evitamos 'var' e usamos 'let' ou 'const'. Use 'let' quando precisar mudar o valor depois, e 'const' quando for algo fixo. Exemplo: const PI = 3.14 nunca deve mudar, mas let contador = 0 pode ser incrementado. Escolher bem entre let e const ajuda a evitar erros e deixa o c√≥digo mais claro."
  },
  {
    id: 2,
    lesson: {
      title: "üìò Exerc√≠cio 2 - Fun√ß√µes",
      text: "Fun√ß√µes s√£o blocos de c√≥digo que executam uma tarefa espec√≠fica. Declaramos fun√ß√µes usando a palavra-chave 'function'.",
      example: "function saudacao() { console.log('Ol√°!'); }",
    },
    question: "Crie uma fun√ß√£o chamada 'soma' que receba dois n√∫meros e retorne a soma deles.",
    answer: "function soma(a, b) { return a + b; }",
    extra: "Fun√ß√µes permitem reaproveitar c√≥digo e evitar repeti√ß√£o. Elas podem receber par√¢metros (informa√ß√µes de entrada) e retornar valores. No exemplo function soma(a, b) { return a + b; }, a fun√ß√£o soma dois n√∫meros e devolve o resultado. Isso permite chamar soma(2,3) e obter 5. Em JavaScript tamb√©m existem fun√ß√µes an√¥nimas e arrow functions, que s√£o formas mais curtas de escrever fun√ß√µes modernas."
  },
  {
    id: 3,
    lesson: {
      title: "üìò Exerc√≠cio 3 - Condicionais",
      text: "Condicionais permitem executar c√≥digo baseado em condi√ß√µes. Usamos 'if', 'else if' e 'else' para isso.",
      example: "if (idade >= 18) { console.log('Maior de idade'); } else { console.log('Menor de idade'); }",
    },
    question: "Escreva um condicional que verifique se uma vari√°vel 'numero' √© maior que 10 e imprima 'Maior que 10' ou '10 ou menor'.",
    answer: "if (numero > 10) { console.log('Maior que 10'); } else { console.log('10 ou menor'); }",
    extra: "Estruturas condicionais s√£o a base da l√≥gica em programa√ß√£o. Com elas, o c√≥digo 'toma decis√µes'. O if avalia uma condi√ß√£o: se for verdadeira, executa um bloco, sen√£o, segue para o else. Tamb√©m podemos encadear com else if para m√∫ltiplas condi√ß√µes. Exemplo: if (nota >= 7) { aprovado } else if (nota >= 5) { recupera√ß√£o } else { reprovado }. Isso ajuda a controlar fluxos diferentes no programa."
  },
  {
    id: 4,
    lesson: {
      title: "üìò Exerc√≠cio 4 - La√ßos de Repeti√ß√£o",
      text: "La√ßos de repeti√ß√£o permitem executar um bloco de c√≥digo v√°rias vezes. O 'for' √© usado para iterar sobre um intervalo ou cole√ß√£o.",
      example: "for (let i = 0; i < 5; i++) { console.log(i); }",
    },
    question: "Crie um la√ßo 'for' que imprima os n√∫meros de 1 a 5 no console.",
    answer: "for (let i = 1; i <= 5; i++) { console.log(i); }",
    extra: "Os la√ßos s√£o √∫teis para repetir tarefas sem precisar escrever o mesmo c√≥digo v√°rias vezes. O for tem tr√™s partes: inicializa√ß√£o (let i = 1), condi√ß√£o (i <= 5) e incremento (i++). O la√ßo executa enquanto a condi√ß√£o for verdadeira. Al√©m do for, existem outros la√ßos como while e for...of. Dominar loops √© essencial para percorrer arrays, listas de objetos e manipular dados em escala."
  },
  {
    id: 5,
    lesson: {
      title: "üìò Exerc√≠cio 5 - Arrays",
      text: "Arrays s√£o listas ordenadas de valores. Podemos acessar elementos pelo √≠ndice, come√ßando do zero.",
      example: "let frutas = ['Ma√ß√£', 'Banana', 'Laranja'];",
    },
    question: "Crie um array chamado 'cores' com os valores 'vermelho', 'verde' e 'azul'.",
    answer: "let cores = ['vermelho', 'verde', 'azul'];",
    extra: "Arrays permitem guardar v√°rios valores em uma √∫nica vari√°vel. Cada item da lista tem uma posi√ß√£o (√≠ndice), que come√ßa em 0. Exemplo: frutas[0] √© 'Ma√ß√£'. Arrays s√£o muito usados para cole√ß√µes de dados: listas de usu√°rios, produtos, etc. Eles v√™m com m√©todos poderosos como push (adicionar), pop (remover), length (tamanho) e forEach (percorrer). Dominar arrays √© essencial para manipular dados em JavaScript."
  },
];

export default jsExercises;
