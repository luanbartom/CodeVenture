const reactExercises = [
  {
    id: 1,
    lesson: {
      title: "üìò Exerc√≠cio 1 - Componente Funcional",
      text: "Um componente funcional em React √© uma fun√ß√£o JavaScript que retorna um elemento React. Eles s√£o simples e f√°ceis de entender.",
      example: `function HelloWorld() {return <h1>Hello, World!</h1>;}`,
    },
    question: "Crie um componente funcional que exiba 'Ol√°, Mundo!'",
    answer: `function OlaMundo() { return <h1>Ol√°, Mundo!</h1>; }`,
    extra: "Os componentes funcionais s√£o a base do React moderno. Eles nada mais s√£o do que fun√ß√µes JavaScript que retornam JSX (a sintaxe parecida com HTML). Cada componente representa uma parte da interface, e voc√™ pode combin√°-los para formar p√°ginas completas. Antes, o React utilizava muito os componentes de classe, mas hoje em dia os funcionais, junto com hooks (como useState e useEffect), se tornaram o padr√£o. Um detalhe importante: o nome do componente deve sempre come√ßar com letra mai√∫scula para que o React o reconhe√ßa como um componente e n√£o como uma tag HTML comum."
  },
  {
    id: 2,
    lesson: {
      title: "üìò Exerc√≠cio 2 - JSX",
      text: "JSX √© uma sintaxe que permite escrever HTML dentro do JavaScript. Ele torna a cria√ß√£o de componentes mais intuitiva.",
      example: `const element = <h1>Hello, JSX!</h1>;`,
    },
    question: "Crie um elemento JSX que exiba 'Aprendendo React'",
    answer: `const elemento = <h1>Aprendendo React</h1>;`,
    extra: "JSX √© uma extens√£o da linguagem JavaScript que o React utiliza. Ele permite escrever algo parecido com HTML dentro do c√≥digo JS, mas no fundo √© convertido em chamadas de fun√ß√µes JavaScript. Por exemplo, <h1>Oi</h1> vira React.createElement('h1', null, 'Oi'). Com JSX podemos inserir vari√°veis e express√µes usando chaves { }, como <p>{nome}</p>. Isso deixa o c√≥digo mais leg√≠vel e muito mais pr√°tico. Vale lembrar que JSX n√£o aceita atributos com palavras reservadas do JS, por isso usamos className em vez de class, e htmlFor em vez de for."
  },
  {
    id: 3,
    lesson: {
      title: "üìò Exerc√≠cio 3 - Props",
      text: "Props s√£o propriedades que voc√™ pode passar para componentes React. Elas permitem que voc√™ torne seus componentes reutiliz√°veis e din√¢micos.",
      example: `function Welcome(props) { return <h1>Hello, {props.name}</h1>; }`,
    },
    question: "Crie um componente que receba uma prop 'nome' e exiba 'Ol√°, {nome}'",
    answer: `function Ola(props) { return <h1>Ol√°, {props.nome}</h1>; }`,
    extra: "Props (propriedades) s√£o como par√¢metros que voc√™ envia para um componente. Isso torna os componentes reutiliz√°veis. Por exemplo, um bot√£o pode receber como props a cor, o texto e a a√ß√£o ao clicar. Assim, voc√™ n√£o precisa criar v√°rios bot√µes diferentes, apenas reutiliza o mesmo componente mudando as props. √â importante lembrar que props s√£o **imut√°veis**: o componente que recebe n√£o pode alterar seu valor, apenas utiliz√°-lo. Essa caracter√≠stica ajuda a manter a previsibilidade da aplica√ß√£o."
  },
  {
    id: 4,
    lesson: {
      title: "üìò Exerc√≠cio 4 - State",
      text: "State √© um objeto que armazena dados que podem mudar ao longo do tempo. Ele √© usado para criar componentes interativos.",
      example: `const [count, setCount] = useState(0);`,
    },
    question: "Crie um estado 'contador' inicializado em 0",
    answer: `const [contador, setContador] = useState(0);`,
    extra: "O state √© como a 'mem√≥ria' de um componente. Com o hook useState, voc√™ consegue criar vari√°veis reativas que, quando alteradas, fazem o componente se re-renderizar automaticamente. Por exemplo, const [contador, setContador] = useState(0) cria um contador que come√ßa em 0 e que pode ser atualizado com setContador(novoValor). Isso permite criar interfaces din√¢micas, como carrinhos de compras, contadores de likes ou formul√°rios interativos. Diferente das props, o state √© controlado internamente pelo componente."
  },
  {
    id: 5,
    lesson: {
      title: "üìò Exerc√≠cio 5 - Eventos",
      text: "Eventos em React s√£o manipulados usando camelCase. Voc√™ pode adicionar eventos como onClick, onChange, etc., para tornar seus componentes interativos.",
      example: `<button onClick={handleClick}>Clique aqui</button>`,
    },
    question: "Crie um bot√£o que exiba um alerta ao ser clicado",
    answer: `<button onClick={handleClick}>Clique aqui</button>`,
    extra: "Eventos em React funcionam de forma muito parecida com os do JavaScript puro, mas t√™m algumas diferen√ßas importantes. Primeiro, os nomes dos eventos seguem camelCase (onClick, onChange) em vez de letras min√∫sculas. Segundo, ao inv√©s de strings, passamos uma fun√ß√£o como valor do evento: <button onClick={meuClique}>Ok</button>. Essa fun√ß√£o pode estar definida no mesmo componente ou vir via props. Eventos s√£o a base para criar interatividade: desde um simples bot√£o at√© formul√°rios complexos ou intera√ß√µes em tempo real."
  },
];

export default reactExercises;
